@model SchoolPortal.Web.Models.Entities.ClassLevel

@{
    ViewBag.Title = "NewClass";
}

<div class="row">
    <!-- left column -->
    <div class="col-md-3"></div>
    <div class="col-md-6">
        <!-- general form elements -->
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">New Class</h3>

                @if (TempData["error"] != null)
                {
                    <div class="alert alert-danger alert-dismissable">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <strong>@TempData["error"]</strong>
                    </div>
                }
            </div>
            @using (Html.BeginForm())
            {
                @*@Html.AntiForgeryToken()*@

        <div class="box-body">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.ClassName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @if (ViewBag.setting == true)
                    {
                        @Html.EditorFor(model => model.ClassName, new { htmlAttributes = new { @class = "form-control", id = "levelclass", onkeyup = "myFunction()", placeholder = "PG or PRE-NUR or NUR or PRI" } })

                    }
                    else
                    {
                        @Html.EditorFor(model => model.ClassName, new { htmlAttributes = new { @class = "form-control", id = "levelclass2", onkeyup = "myFunction2()", placeholder = "JSS or SSS" } })

                    }
                    @Html.ValidationMessageFor(model => model.ClassName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                Form Teacher
                <div class="">

                    @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control select", require="required" })
                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.Label("Pass Mark", htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <input type="text" name="Passmark" value="@ViewBag.Passmark" class="form-control" />
                    @*@Html.EditorFor(model => model., new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.Passmark, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Promotion By Trial", htmlAttributes: new { @class = "control-label" })
                <div class="">
                    <input type="text" name="PromotionByTrial" value="@ViewBag.PromotionByTrial" class="form-control" />
                    @*@Html.EditorFor(model => model., new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.PromotionByTrial, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (GeneralService.EnabledProjectScore() == true)
            {
                <div class="form-group">
                    @Html.Label("Project Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="Project" value="@ViewBag.projectscore" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Project, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            @if (GeneralService.EnabledTestScore() == true)
            {
                <div class="form-group">
                    @Html.Label("Test or Assessement Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="AccessmentScore" value="@ViewBag.AccessmentScore" class="form-control" />
                        @Html.ValidationMessageFor(model => model.AccessmentScore, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            @if (GeneralService.EnabledTestScore2() == true)
            {
                <div class="form-group">
                    @Html.Label("2nd Test Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="TestScore2" value="@ViewBag.test2score" class="form-control" />
                        @Html.ValidationMessageFor(model => model.TestScore2, "", new { @class = "text-danger" })
                    </div>
                </div>

            }

            @if (GeneralService.EnabledClassExerciseScore() == true)
            {
                <div class="form-group">
                    @Html.Label("Class Exercise Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="ClassExercise" value="@ViewBag.ClassExercisescore" class="form-control" />
                        @Html.ValidationMessageFor(model => model.ClassExercise, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            @if (GeneralService.EnabledAssessmentScore() == true)
            {
                <div class="form-group">
                    @Html.Label("Assessment Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="Assessment" value="@ViewBag.assessmentscore" class="form-control" />
                        @Html.ValidationMessageFor(model => model.Assessment, "", new { @class = "text-danger" })
                    </div>
                </div>

            }

            @if (GeneralService.EnabledExamScore() == true)
            {

                <div class="form-group">
                    @Html.Label("Exam Score", htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <input type="text" name="ExamScore" value="@ViewBag.examscore" class="form-control" />
                        @Html.ValidationMessageFor(model => model.ExamScore, "", new { @class = "text-danger" })
                    </div>
                </div>

            }


            @*<div class="form-group">
            @Html.Label("Exam Score", htmlAttributes: new { @class = "control-label" })
            <div class="">
                <input type="text" name="ExamScore" value="@ViewBag.ExamScore" class="form-control" />
                @Html.ValidationMessageFor(model => model.ExamScore, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Assessement Score", htmlAttributes: new { @class = "control-label" })
            <div class="">
                <input type="text" name="AccessmentScore" value="@ViewBag.AccessmentScore" class="form-control" />
                @Html.ValidationMessageFor(model => model.AccessmentScore, "", new { @class = "text-danger" })
            </div>
        </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.ShowPositionOnClassResult, htmlAttributes: new { @class = "control-label" })

                @Html.CheckBoxFor(model => model.ShowPositionOnClassResult, new { @checked = "checked" })
                @Html.ValidationMessageFor(model => model.ShowPositionOnClassResult, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.Label("School Fees", htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.SchoolFee, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SchoolFee, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SubjectSettings, htmlAttributes: new { @class = "control-label" })

                @Html.CheckBoxFor(model => model.SubjectSettings, new { @checked = "checked" })
                @Html.ValidationMessageFor(model => model.SubjectSettings, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ShowClass, htmlAttributes: new { @class = "control-label" })

                @Html.CheckBoxFor(model => model.ShowClass, new { @checked = "checked" })
                @Html.ValidationMessageFor(model => model.ShowClass, "", new { @class = "text-danger" })

            </div>


        </div>

                <div class="box-footer">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="javascript: history.back()" class="btn btn-default">Cancel</a>
                </div>

            }
        </div>

    </div>
    <div class="col-md-3"></div>

</div>



@using SchoolPortal.Web.Areas.Service
@{

    string url = HttpContext.Current.Request.Url.AbsoluteUri;
    Logger.log(User.Identity.Name, url.ToString());

}



@section Scripts {
        @**@


}
@section Scripts2 {

}